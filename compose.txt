version: 도커 컴포즈 사양의 버전을 지정한다.
service: 서비스의 자식은 컨테이너이다.
현재 에플리케이션에는 3개의 자식이 존재한다.(프론트,백,db)
컨테이너에 레이블을 지정하기 위해 원하는 이름을 골라 컨테이너에 이름을 지정할 수 있다.
ex) backend:
        
    frontend:
    mongodb:
        image: '이미지' -> 우리가 사용하는 이미지를 작성하면 된다
        volumes :  네임드 볼륨 지정할 때 사용
            - ...
            - ... 
        env_file:
            - ./env/mongo.env 이 파일에 특정된 모든 서비스에 대해 새 환경을 자동으로 생성
            
        
        networks:
            - goals-net : 네트워크를 생성할 수 있다. 이름은 자유롭게 



        enviroment:
            환경변수를 설정하는 곳이다.
            MONGO_INITDB_ROOT_USERNAME : max
            MONGO_INITDB_ROOT_PASSWORD : secret
            이런식으로 설정 가능하다.
        
        backend :
           build:  ./backend
           dockerfile: Dockerfile-dev





docker image prune -a : 현재 빌드된 모든 이미지를 삭제한다.

docker-compose up : 도커 컴포즈를 실행한다.
docker-compose down -v : 컴포즈를 종료한다. 이 때 볼륨도 같이 제거한다.


build : ./backend
 도커파일을 찾을 수 있는 곳을 알고 싶을 때 docker-compose.yaml 파일과 동일한 폴더에 있고
그 안에 backend폴더가 있다면 도커 커포즈는 그 폴더를 살펴 dockerfile을 찾는다.

build
    context : ./backend
    dockerfile: Dockerfile-dev

만약 Dockerfile이 다른 중첩 폴더에 있고 그 중첩 폴더 외부의 폴더에 액세스해야하는 경우
더 높은 수준의 폴더로 설정해야한다. 
이 과정은 이미지를 수동으로 빌드하는 것을 대체한다.

backend:
    ports: 
    - '80:80' // 외부:내부
    
    volumes:
        - logs:/app/logs // 네임드 볼륨 설정
        - ./backend:app/ // 컨테이너 내부의 app 폴더와 공유


env 환경변수 설정방법
env전용 파일을 생성 후 값을 작성한다
    env_file:
        - ./backend.env


    도커 컴포즈에만 있는 옵션
    도커 컴포즈를 사용하면 여러 서비스를 만들고 시작한다
    하나의 컨테이너가 다른 컨테이너에 의존할 수 있다.
    예를 들어 강의에선 backend 컨테이너는 실행중인 mongodb 컨테이너에 의존한다
    이럴 때 의존성을 표현할 수 있다.
    depends_on:
     - mongodb
    


    frontend:
     build:./frontend // 도커파일이 보관된 곳!
     ports:
        - '3000:3000'
     volumes:
        -./frontend/src:/app/src
    
    
    stdin_open: true // 이 서비스에 개방형 입력 연결이 필요하다(-it 옵션이 필요) 
    tty : true // tty플래그는 이 터미널에 연결하기 위함이다.
    위 두 가지 옵션으로 인터렉티브 모드에서 시작된다.
    
    depends_on:
    - backend


